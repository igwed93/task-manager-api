// Prisma schema file

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id  @default(uuid())
  email             String           @unique
  password          String
  name              String
  role              Role             @default(USER)
  tasks             Task[]
  sharedTasks       TaskShare[]      @relation("SharedTasks")
  comments          TaskComment[]
  taskReactions     TaskReaction[]
  commentReactions  CommentReaction[]
  notifcations      Notification[]
  auditLogs         AuditLog[]
  createdAt         DateTime         @default(now())

  // Email verification fields
  emailVerified             Boolean    @default(false)
  verificationToken         String?    @unique
  verificationTokenExpires  DateTime?

  // Password reset fields
  resetToken                String?    @unique
  resetTokenExpires         DateTime?
}

enum Role {
  USER
  ADMIN
}

model Task {
  id         String           @id  @default(uuid())
  title      String
  completed  Boolean          @default(false)
  userId     String
  user       User             @relation(fields: [userId], references: [id])
  shares     TaskShare[]
  comments   TaskComment[]
  reactions  TaskReaction[]
  createdAt  DateTime         @default(now())
}

model TaskShare {
  id        String    @id  @default(uuid())
  taskId    String
  userId    String
  task      Task      @relation(fields: [taskId], references: [id])
  user      User      @relation("SharedTasks", fields: [userId], references: [id])
  createdAt DateTime  @default(now())

  @@unique([taskId, userId])
}

model TaskComment {
  id         String           @id @default(uuid())
  content    String
  taskId     String
  userId     String
  createdAt  DateTime         @default(now())

  task       Task             @relation(fields: [taskId], references: [id])
  user       User             @relation(fields: [userId], references: [id])
  reactions  CommentReaction[]
}

model TaskReaction {
  id        String   @id @default(uuid())
  type      String   // e.g., "like", "love", "laugh"
  userId    String
  taskId    String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  task      Task     @relation(fields: [taskId], references: [id])

  @@unique([userId, taskId, type])
}

model CommentReaction {
  id         String   @id @default(uuid())
  type       String
  userId     String
  commentId  String
  createdAt  DateTime @default(now())

  user       User        @relation(fields: [userId], references: [id])
  comment    TaskComment @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId, type])
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  entity    String
  entityId  String
  details   String?
  createdAt DateTime @default(now())

  user      User?    @relation(fields: [userId], references: [id])
}

model Notification {
  id         String   @id @default(uuid())
  userId     String
  type       String   // e.g., 'TASK_SHARED', 'COMMENT_ADDED'
  message    String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
}